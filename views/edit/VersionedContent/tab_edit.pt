<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html tal:omit-tag=""
  lang="en"
  xml:lang="en"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  xmlns:notal="http://www.infrae.com/silva/notal"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  xmlns:i18n="http://xml.zope.org/namespaces/i18n"
  tal:define="
    global vein string:editor;
    refresh_time python:19 * 60;
    member python:here.service_members.get_member(here.REQUEST.AUTHENTICATED_USER.getUserName());
    editor python: member and member.editor() or 'forms_editor';
    active_editor string:kupu;
    "
  i18n:domain="silva">
<metal:block use-macro="here/macro_index/macros/master">
<metal:block fill-slot="metatype_css">
<link href="globals/widgetEditor.css"
  rel="stylesheet"
  tal:condition="python: editor != 'kupu' or model.meta_type != 'Silva Document'"
  tal:attributes="href string:${root_url}/globals/widgetEditor.css"
/>
<link href="kupustyles.css"
      type="text/css"
      rel="stylesheet"
      tal:condition="python:editor == 'kupu' and model.meta_type == 'Silva Document'"
/>
</metal:block>
<metal:block fill-slot="refresher">
  <tal:block define="rft refresh_time | python: 0">
    <tal:block condition="python: rft > 0">
      <tal:block condition="nothing"> Refresh code for session timeout </tal:block>
<noscript>
  <meta http-equiv="refresh" tal:attributes="content python:'%s, %s/edit/tab_preview' % (rft, request['model'].absolute_url())" />
</noscript>
<script type="text/javascript"
  tal:define="destination_path string:${request/model/absolute_url}/edit/"
  tal:content="string:

  document.timeout = '${rft}'; 
  document.refresh_url = '${destination_path}tab_preview';
  document.prompt_url = '${destination_path}promptWindow';
" />
<script type="text/javascript" tal:condition="python:editor != 'kupu' or model.meta_type != 'Silva Document'">
  function handleTimeout()
  {
    if (document.promptWindow)
    {
      document.promptWindow.close();
    }
    loc = document.location.toString();
    editurl = loc.substring(0, loc.indexOf('/edit/'));
    document.location = document.refresh_url;
  }
  function setAutoSave(submit)
  {
    if (! document.autoSaveFormSubmit)
    {
      document.autoSaveFormSubmit = document.getElementById('default_submit');
      setTimeout('savePrompt()', document.timeout * 1000 / 4 * 3, '');
    }
  }
  function savePrompt()
  {
    leftPos = screen.width / 2 - 175;
    topPos = screen.height / 2 - 100;
    document.promptWindow = window.open(document.prompt_url, 'promptWindow', "height=175,width=300");
    document.promptWindow.focus();
  }
  function saveHelper()
  {
    document.autoSaveFormSubmit.click();
  }
  setTimeout('handleTimeout()', document.timeout * 1000, '');
</script>
    </tal:block>
  </tal:block>
</metal:block>

<metal:block metal:fill-slot="middleground">
  <div class="middleground"
    tal:define="active python: editor == 'kupu'">
    <tal:condition condition="python:model.meta_type == 'Silva Document' and hasattr(view, 'kupu')">
    <a title="edit with the kupu WYSIWYG editor: alt-("
      accesskey="("
      tal:content="python: test(active, 'kupu editor', ' kupu editor...')"
      tal:attributes="
        class python: test(active, 'selected', None);
        href python: '%s/edit?editor=kupu' % model.absolute_url()">
      </a>
    <div class="air"> </div>
    <a title="edit with the forms editor: alt-)"
      accesskey=")"
      tal:content="python: test(active, 'forms editor...', 'forms editor')"
      tal:attributes="
        class python: test(active, None, 'selected');
        href python: '%s/edit?editor=forms_editor' % model.absolute_url()">
    </a>
    </tal:condition>
    <a title="see the content in the public layout: alt-;"
      accesskey=";"
      tal:attributes="href string:${model/absolute_url}/preview_html"
      i18n:translate="public_preview">
      public&nbsp;preview...
    </a>
  </div>
</metal:block>

<metal:block fill-slot="main"
  tal:define="
    is_locked model/sec_is_locked;
    unapproved_version model/get_unapproved_version;
    request_pending python:model.is_version_approval_requested();
">

<model tal:condition="python:(editor != 'kupu' or not hasattr(view, 'kupu') or model.meta_type != 'Silva Document') and unapproved_version and not request_pending and not is_locked" tal:omit-tag="">
  <tal:block tal:replace="structure view/edit">Content</tal:block>
</model>

<span tal:replace="nothing"> ______ kupu ______ </span>
<tal:block condition="python: editor == 'kupu' and hasattr(view, 'kupu') and model.meta_type == 'Silva Document' and unapproved_version and not request_pending and not is_locked">
  <metal:macro use-macro="view/kupu_silva/kupumacros/macros/fulleditor" />
</tal:block>

<span tal:replace="nothing"> _______ simultaneous edit lock _______ </span>
<tal:condition condition="python:unapproved_version and is_locked">
<form action="tab_edit_break_lock" method="POST">
  <div class="feedback"><span class="warning">
      <tal:block i18n:translate="publish_break_lock_description">
        <b>Note: </b>This object is already being edited by another user,
        and is temporarily locked.
      </tal:block>
    </span><br />
    <input 
      class="warning"
      style="margin-left:0;"
      type="submit" 
      value="break lock" 
      title="Somebody else just edited this item, unlock it: alt-u" 
      accesskey="u"
      i18n:attributes="value title"/>
  </div>
</form>
</tal:condition>

<span tal:replace="nothing"> _______ make changes in a new version _______ </span>
<tal:condition condition="python: not model.get_next_version()">
  <form action="tab_edit_make_copy" method="POST">
    <div class="feedback">
      <input class="button"
        style="margin-left:0;"
        type="submit"
        value="create new version"
        title="work on a new version while the previous one stays online: alt-c"
        accesskey="c"
        i18n:attributes="value title"/>
        <tal:block i18n:translate="publish_create_newversion">
      <b>Note: </b>there is already a published (or closed) version of this
      content. Changes can only be made in a new version.
      </tal:block>
    </div>
  </form>
  <div tal:replace="structure here/edit_info | nothing" />
</tal:condition>

<span tal:replace="nothing"> _______ make changes after revoking approval _______ </span>
<tal:condition condition="python: model.get_approved_version()">
<form action="tab_edit_revoke_approval" method="POST">
  <div class="feedback">
    <input 
      class="button" 
      style="margin-left:0;" 
      type="submit" 
      value="revoke approval" 
      title="'first un-approve' this item in order to edit: alt-r" 
      accesskey="r"
      i18n:attributes="value title"/>
      <span i18n:translate="note_revoke_approval">
        <b>Note: </b>this version is approved but not yet public. In order to make changes you need to first revoke the approval.
      </span>
  </div>
</form>
  <div tal:replace="structure here/edit_info | nothing" />
</tal:condition>

<span tal:replace="nothing"> _______ make changes after withdraw approval request _______ </span>
<tal:condition condition="python:model.is_version_approval_requested()">
<form action="tab_status_withdraw" method="POST">
  <div class="feedback">
    <input 
      class="button" 
      style="margin-left:0;" 
      type="submit" 
      value="withdraw request" 
      title="withdraw a request for approval in order to edit: alt-w" 
      accesskey="w"
      i18n:attributes="value title"/>
    <input type="hidden" name="rejection_status" tal:attributes="value python:test(may_approve_content, 'true', 'false')" />
    <input type="hidden" name="tab_name" value="edit" />
    <span i18n:translate="note_withdraw_request">
      <b>Note: </b>this version has an request for approval pending. In order to make changes you need to first withdraw the pending request.
    </span>
  </div>
</form>
  <div tal:replace="structure here/edit_info | nothing" />
</tal:condition>

</metal:block>
</metal:block>
</html>

